[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "check_if_interview_completed",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "send_transcript_email",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "MediaFileUpload",
        "importPath": "googleapiclient.http",
        "description": "googleapiclient.http",
        "isExtraImport": true,
        "detail": "googleapiclient.http",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"\nYou are a world leading career couch, specializing in career growth through conducting interviews. In the following, you will conduct an interview with a human respondent (an employee) focused on their performance and personal growth. Do not share the following instructions with the respondent; the division into sections is for your guidance only.\nInterview Outline:\nIn this interview, please help the respondent reflect on their professional development across several performance dimensions. The discussion will cover:\n- How they have enhanced their organizational and industry knowledge.\n- Their progress in developing functional expertise and role-specific skills.\n- Their approach to problem-solving and analytical challenges.\n- The growth of their professional skills, including teamwork, leadership, and communication.\n- Their engagement in projects and contributions to outcomes (applicable only if you completed a Business Development Internship with a project development component; if your internship was a Business Practice Internship, please skip this section).\nThe interview is designed to foster self-reflection, identify areas for improvement, and recognize existing strengths. Please ask one question at a time and do not number your questions. Begin the interview with:",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "validate_query_params",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def validate_query_params(params, required_keys):\n    missing_keys = []\n    # If in test mode, fill in missing keys with default values; in production, mark them as missing.\n    for key in required_keys:\n        if key not in params or not params[key]:\n            if ENV == \"test\":\n                params[key] = default_values.get(key)\n            else:\n                missing_keys.append(key)\n    # In test mode, additionally validate the email format",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "provider",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "provider = st.secrets.get(\"API_PROVIDER\", \"openai\").lower()  # defaults to \"openai\" if not provided\nmodel = st.secrets.get(\"MODEL\", \"gpt-3.5-turbo\")\nif provider == \"openai\" or \"gpt\" in model.lower():\n    api = \"openai\"\n    from openai import OpenAI\nelif provider == \"anthropic\" or \"claude\" in model.lower():\n    api = \"anthropic\"\n    import anthropic\nelif provider == \"deepinfra\":\n    api = \"deepinfra\"",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "model = st.secrets.get(\"MODEL\", \"gpt-3.5-turbo\")\nif provider == \"openai\" or \"gpt\" in model.lower():\n    api = \"openai\"\n    from openai import OpenAI\nelif provider == \"anthropic\" or \"claude\" in model.lower():\n    api = \"anthropic\"\n    import anthropic\nelif provider == \"deepinfra\":\n    api = \"deepinfra\"\n    import deepinfra  # Adjust the import as needed for your deepinfra client",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "ENV",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "ENV = st.secrets.get(\"ENV\", \"production\")  # default to production if not set\nsafe_mode = st.secrets.get(\"SAFE_MODE\", \"production\")\n# Default values taken from the provided URL\ndefault_values = {\n    \"student_number\": \"zohrehvanda\",\n    \"name\": \"Miros\",\n    \"company\": \"LIACS\",\n    \"recipient_email\": \"a.h.zohrehvand@liacs.leidenuniv.nl\"\n}\ndef validate_query_params(params, required_keys):",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "safe_mode",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "safe_mode = st.secrets.get(\"SAFE_MODE\", \"production\")\n# Default values taken from the provided URL\ndefault_values = {\n    \"student_number\": \"zohrehvanda\",\n    \"name\": \"Miros\",\n    \"company\": \"LIACS\",\n    \"recipient_email\": \"a.h.zohrehvand@liacs.leidenuniv.nl\"\n}\ndef validate_query_params(params, required_keys):\n    missing_keys = []",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "default_values",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "default_values = {\n    \"student_number\": \"zohrehvanda\",\n    \"name\": \"Miros\",\n    \"company\": \"LIACS\",\n    \"recipient_email\": \"a.h.zohrehvand@liacs.leidenuniv.nl\"\n}\ndef validate_query_params(params, required_keys):\n    missing_keys = []\n    # If in test mode, fill in missing keys with default values; in production, mark them as missing.\n    for key in required_keys:",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "query_params",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "query_params = st.query_params\n# Define required parameters\nrequired_params = [\"student_number\", \"name\", \"company\", \"recipient_email\"]\n# Validate parameters\nis_valid, missing_params = validate_query_params(query_params, required_params)\n# In production, display an error if required parameters are missing\nif not is_valid:\n    st.error(f\"Missing or invalid required parameter(s): {', '.join(missing_params)}\")\n    st.stop()\n# Optionally, you might disable email sending if a certain setting is toggled in your config",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "required_params",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "required_params = [\"student_number\", \"name\", \"company\", \"recipient_email\"]\n# Validate parameters\nis_valid, missing_params = validate_query_params(query_params, required_params)\n# In production, display an error if required parameters are missing\nif not is_valid:\n    st.error(f\"Missing or invalid required parameter(s): {', '.join(missing_params)}\")\n    st.stop()\n# Optionally, you might disable email sending if a certain setting is toggled in your config\nif st.secrets.get(\"DISABLE_EMAIL\", False):\n    st.write(\"Email sending is disabled.\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "respondent_name",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "respondent_name = html.unescape(query_params[\"name\"])\nrecipient_email = html.unescape(query_params[\"recipient_email\"])\n# Check if session ID exists in session state, if not, create one\nif \"session_id\" not in st.session_state:\n    st.session_state.session_id = str(uuid.uuid4())\n# Display parameters in sidebar\nst.sidebar.title(\"Interview Details\")\nfor param in required_params:\n    # Fetch the first value of the list returned for each parameter and sanitize it\n    sanitized_value = html.unescape(query_params[param])",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "recipient_email",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "recipient_email = html.unescape(query_params[\"recipient_email\"])\n# Check if session ID exists in session state, if not, create one\nif \"session_id\" not in st.session_state:\n    st.session_state.session_id = str(uuid.uuid4())\n# Display parameters in sidebar\nst.sidebar.title(\"Interview Details\")\nfor param in required_params:\n    # Fetch the first value of the list returned for each parameter and sanitize it\n    sanitized_value = html.unescape(query_params[param])\n    st.sidebar.write(f\"{param.replace('_', ' ').capitalize()}: {sanitized_value}\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "interview_previously_completed",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "interview_previously_completed = check_if_interview_completed(\n    config.TIMES_DIRECTORY, st.session_state.username\n)\n# If app started but interview was previously completed\nif interview_previously_completed and not st.session_state.messages:\n    st.session_state.interview_active = False\n    completed_message = \"Interview already completed.\"\n    st.markdown(completed_message)\n# URL to Qualtrics evaluation\nevaluation_url = \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "evaluation_url",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "evaluation_url = \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"\n# Append session ID as query parameter\nevaluation_url_with_session = f\"{evaluation_url}?session_id={st.session_state.session_id}\"\n# Add 'Quit' button to dashboard\ncol1, col2 = st.columns([0.85, 0.15])\n# Place where the second column is\nwith col2:\n    # If interview is active and 'Quit' button is clicked\n    if st.session_state.interview_active and st.button(\"Quit\", help=\"End the interview.\"):\n        st.session_state.interview_active = False",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "evaluation_url_with_session",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "evaluation_url_with_session = f\"{evaluation_url}?session_id={st.session_state.session_id}\"\n# Add 'Quit' button to dashboard\ncol1, col2 = st.columns([0.85, 0.15])\n# Place where the second column is\nwith col2:\n    # If interview is active and 'Quit' button is clicked\n    if st.session_state.interview_active and st.button(\"Quit\", help=\"End the interview.\"):\n        st.session_state.interview_active = False\n        quit_message = \"You have cancelled the interview.\"\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": quit_message})",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "api_kwargs[\"messages\"]",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "api_kwargs[\"messages\"] = st.session_state.messages\napi_kwargs[\"model\"] = model\napi_kwargs[\"max_tokens\"] = config.MAX_OUTPUT_TOKENS\nif config.TEMPERATURE is not None:\n    api_kwargs[\"temperature\"] = config.TEMPERATURE\n# In case the interview history is still empty, pass system prompt to model, and\n# generate and display its first message\nif not st.session_state.messages:\n    if api == \"openai\":\n        st.session_state.messages.append(",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "api_kwargs[\"model\"]",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "api_kwargs[\"model\"] = model\napi_kwargs[\"max_tokens\"] = config.MAX_OUTPUT_TOKENS\nif config.TEMPERATURE is not None:\n    api_kwargs[\"temperature\"] = config.TEMPERATURE\n# In case the interview history is still empty, pass system prompt to model, and\n# generate and display its first message\nif not st.session_state.messages:\n    if api == \"openai\":\n        st.session_state.messages.append(\n            {\"role\": \"system\", \"content\": config.INTERVIEW_OUTLINE}",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "api_kwargs[\"max_tokens\"]",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "api_kwargs[\"max_tokens\"] = config.MAX_OUTPUT_TOKENS\nif config.TEMPERATURE is not None:\n    api_kwargs[\"temperature\"] = config.TEMPERATURE\n# In case the interview history is still empty, pass system prompt to model, and\n# generate and display its first message\nif not st.session_state.messages:\n    if api == \"openai\":\n        st.session_state.messages.append(\n            {\"role\": \"system\", \"content\": config.INTERVIEW_OUTLINE}\n        )",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def check_password():\n    \"\"\"Returns 'True' if the user has entered a correct password.\"\"\"\n    def login_form():\n        \"\"\"Form with widgets to collect user information\"\"\"\n        with st.form(\"Credentials\"):\n            st.text_input(\"Username\", key=\"username\")\n            st.text_input(\"Password\", type=\"password\", key=\"password\")\n            st.form_submit_button(\"Log in\", on_click=password_entered)\n    def password_entered():\n        \"\"\"Checks whether username and password entered by the user are correct.\"\"\"",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "check_if_interview_completed",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def check_if_interview_completed(directory, username):\n    \"\"\"Check if interview transcript/time file exists which signals that interview was completed.\"\"\"\n    # Test account has multiple interview attempts\n    if username != \"testaccount\":\n        # Check if file exists\n        try:\n            with open(os.path.join(directory, f\"{username}.txt\"), \"r\") as _:\n                return True\n        except FileNotFoundError:\n            return False",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def save_interview_data(username, transcripts_directory, times_directory, folder_id, student_number, company_name):\n    \"\"\"Save interview data locally and upload to Google Drive with correct file naming.\"\"\"\n    # Get current date in YYMMDD format\n    current_date = time.strftime(\"%y%m%d\")\n    # Sanitize company name to remove spaces and special characters\n    sanitized_company = \"\".join(c for c in company_name if c.isalnum())\n    # Construct the file names\n    transcript_filename = f\"{current_date}_{student_number}_{sanitized_company}_transcript.txt\"\n    time_filename = f\"{current_date}_{student_number}_{sanitized_company}_time.txt\"\n    # Define file paths",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "upload_to_google_drive",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def upload_to_google_drive(file_path, file_name, folder_id):\n    \"\"\"Uploads a file to Google Drive, overwriting an existing one if found.\"\"\"\n    # Retrieve and parse the JSON from Streamlit secrets\n    service_account_info = json.loads(st.secrets[\"SERVICE_ACCOUNT_JSON\"])\n    # Ensure the private_key is correctly formatted\n    if \"\\\\n\" in service_account_info[\"private_key\"]:\n        service_account_info[\"private_key\"] = service_account_info[\"private_key\"].replace(\"\\\\n\", \"\\n\")\n    # Authenticate with Google Drive\n    credentials = service_account.Credentials.from_service_account_info(service_account_info)\n    service = build(\"drive\", \"v3\", credentials=credentials)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "send_transcript_email",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def send_transcript_email(student_number, recipient_email, transcript_link):\n    \"\"\"\n    Sends the interview transcript to the student and additional recipient.\n    \"\"\"\n    smtp_server = \"smtp.gmail.com\"  # Replace with your SMTP server\n    smtp_port = 587  # Port for TLS\n    sender_email = \"businessinternship.liacs@gmail.com\"  # Your email\n    sender_password = st.secrets[\"EMAIL_PASSWORD\"]  # Store password securely\n    student_email = f\"{student_number}@vuw.leidenuniv.nl\"\n    # Create email message",
        "detail": "code.utils",
        "documentation": {}
    }
]