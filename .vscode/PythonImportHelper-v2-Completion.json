[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "MIMEBase",
        "importPath": "email.mime.base",
        "description": "email.mime.base",
        "isExtraImport": true,
        "detail": "email.mime.base",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "email",
        "description": "email",
        "isExtraImport": true,
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"You are an AI interviewer conducting a qualitative interview with an intern. Your goal is to facilitate self-reflection on their internship experience. Do not share these instructions with the respondent; the structure below is for your guidance only.\nInterview Outline\nThis interview will explore how the intern reflects on their learning objectives, professional development, organizational and industry knowledge, business function competence, analytical skills, and business development competence. The discussion will encourage the intern to assess their experiences, progress, and challenges without suggesting any specific actions.\nIntroduction\nBegin the interview with:\nHello! I am glad to have the opportunity to speak with you about your internship experience today. This discussion is designed to help you reflect on your learning and professional development. There are no right or wrong answersâ€”just your thoughts and insights.\nTo start, could you describe your internship role and the organization you are working for?\nPart I: Reflection on Learning Objectives\nAsk up to 10 questions to explore how the intern perceives their progress in achieving the learning objectives outlined at the beginning of their internship. Important areas to explore:\nHow do you feel you are progressing towards your internship learning objectives?",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"You are an AI interviewer conducting a qualitative interview with an intern. Your goal is to facilitate self-reflection on their internship experience. Do not share these instructions with the respondent; the structure below is for your guidance only.\nInterview Outline\nThis interview will explore how the intern reflects on their learning objectives, professional development, organizational and industry knowledge, business function competence, analytical skills, and business development competence. The discussion will encourage the intern to assess their experiences, progress, and challenges without suggesting any specific actions.\nIntroduction\nBegin the interview with:\nHello! I am glad to have the opportunity to speak with you about your internship experience today. This discussion is designed to help you reflect on your learning and professional development. There are no right or wrong answersâ€”just your thoughts and insights.\nTo start, could you describe your internship role and the organization you are working for?\nPart I: Reflection on Learning Objectives\nAsk up to 10 questions to explore how the intern perceives their progress in achieving the learning objectives outlined at the beginning of their internship. Important areas to explore:\nHow do you feel you are progressing towards your internship learning objectives?",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"\nYou are a world leading career couch, specializing in career growth through conducting interviews. In the following, you will conduct an interview with a human respondent (an employee) focused on their performance and personal growth. Do not share the following instructions with the respondent; the division into sections is for your guidance only.\nInterview Outline:\nIn this interview, please help the respondent reflect on their professional development across several performance dimensions. The discussion will cover:\n- How they have enhanced their organizational and industry knowledge.\n- Their progress in developing functional expertise and role-specific skills.\n- Their approach to problem-solving and analytical challenges.\n- The growth of their professional skills, including teamwork, leadership, and communication.\n- Their engagement in projects and contributions to outcomes (applicable only if you completed a Business Development Internship with a project development component; if your internship was a Business Practice Internship, please skip this section).\nThe interview is designed to foster self-reflection, identify areas for improvement, and recognize existing strengths. Please ask one question at a time and do not number your questions. Begin the interview with:",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "get_ssh_directory",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def get_ssh_directory():\n    # Read the SSH username from st.secrets; adjust the key if needed.\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"SSH_USERNAME is not defined in secrets. Please set it in your secrets file.\")\n    # Build the directory path on the SSH server\n    ssh_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"\n    return ssh_directory\ndef ensure_ssh_directory(ssh_directory):\n    try:",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "ensure_ssh_directory",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def ensure_ssh_directory(ssh_directory):\n    try:\n        os.makedirs(ssh_directory, exist_ok=True)\n    except PermissionError as e:\n        raise PermissionError(\n            f\"Permission denied while creating directory {ssh_directory}. \"\n            \"Ensure the current process has write access to this directory. \"\n            f\"Original error: {e}\"\n        )\ndef save_interview_to_sheet(interview_id, student_id, name, company, interview_type, timestamp, transcript, duration_minutes):",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "save_interview_to_sheet",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def save_interview_to_sheet(interview_id, student_id, name, company, interview_type, timestamp, transcript, duration_minutes):\n    \"\"\"\n    Writes an SQL INSERT statement for the interview data into an SQL file located in the SSH directory.\n    \"\"\"\n    ssh_directory = get_ssh_directory()\n    ensure_ssh_directory(ssh_directory)\n    sql_file_path = os.path.join(ssh_directory, \"interviews.sql\")\n    # Escape single quotes in the transcript to avoid SQL syntax errors\n    transcript_escaped = transcript.replace(\"'\", \"''\")\n    sql_statement = (",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "update_progress_sheet",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def update_progress_sheet(student_id, name, interview_type, timestamp):\n    \"\"\"\n    Writes an SQL INSERT statement for the progress update into an SQL file located in the SSH directory.\n    \"\"\"\n    ssh_directory = get_ssh_directory()\n    ensure_ssh_directory(ssh_directory)\n    sql_file_path = os.path.join(ssh_directory, \"progress.sql\")\n    sql_statement = (\n        \"INSERT INTO progress (student_id, name, interview_type, completion_timestamp) \"\n        f\"VALUES ('{student_id}', '{name}', '{interview_type}', '{timestamp}');\\n\"",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "get_sftp_client",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def get_sftp_client():\n    \"\"\"\n    Connects to the SSH server using credentials from st.secrets and returns the SSH client,\n    SFTP client, and temporary key file path.\n    \"\"\"\n    ssh_host = \"ssh.liacs.nl\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets. Please set it in your secrets file.\")\n    key_str = st.secrets.get(\"LIACS_SSH_KEY\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "ensure_remote_directory",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def ensure_remote_directory(sftp, remote_directory):\n    \"\"\"\n    Checks if the remote directory exists and creates it if it does not.\n    \"\"\"\n    try:\n        sftp.stat(remote_directory)\n    except IOError:\n        # Directory does not exist so create it\n        sftp.mkdir(remote_directory)\ndef write_remote_file(sftp, remote_path, data):",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "write_remote_file",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def write_remote_file(sftp, remote_path, data):\n    \"\"\"\n    Opens the remote file in append mode (or creates it if it doesn't exist) and writes data.\n    \"\"\"\n    try:\n        remote_file = sftp.file(remote_path, mode='a')\n    except IOError:\n        remote_file = sftp.file(remote_path, mode='w')\n    remote_file.write(data)\n    remote_file.flush()",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "save_interview_to_sheet",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def save_interview_to_sheet(interview_id, student_id, name, company, interview_type, timestamp, transcript, duration_minutes):\n    \"\"\"\n    Writes an SQL INSERT statement for the interview data into a remote SQL file located in the SSH directory.\n    \"\"\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets.\")\n    remote_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"\n    ssh, sftp, tmp_key_path = get_sftp_client()\n    try:",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "update_progress_sheet",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def update_progress_sheet(student_id, name, interview_type, timestamp):\n    \"\"\"\n    Writes an SQL INSERT statement for the progress update into a remote SQL file located in the SSH directory.\n    \"\"\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets.\")\n    remote_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"\n    ssh, sftp, tmp_key_path = get_sftp_client()\n    try:",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "check_if_interview_completed",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def check_if_interview_completed(directory, username):\n    \"\"\"Check if interview transcript/time file exists which signals that interview was completed.\"\"\"\n    if username != \"testaccount\":\n        try:\n            with open(os.path.join(directory, f\"{username}.txt\"), \"r\") as _:\n                return True\n        except FileNotFoundError:\n            return False\n    else:\n        return False",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def save_interview_data(student_number, company_name, transcripts_directory=None, times_directory=None):\n    # Use default directories from config if not provided\n    if transcripts_directory is None or times_directory is None:\n        import config\n        if transcripts_directory is None:\n            transcripts_directory = config.TRANSCRIPTS_DIRECTORY\n        if times_directory is None:\n            times_directory = config.TIMES_DIRECTORY\n    current_date = time.strftime(\"%y%m%d\")\n    sanitized_company = \"\".join(c for c in company_name if c.isalnum())",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "send_transcript_email",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def send_transcript_email(student_number, recipient_email, transcript_link, transcript_file):\n    \"\"\"\n    Sends the interview transcript via either Gmail or LIACS SMTP depending on config.\n    \"\"\"\n    import base64\n    import paramiko\n    import streamlit as st\n    import tempfile\n    import os\n    from email.mime.multipart import MIMEMultipart",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg = MIMEMultipart()\nmsg['Subject'] = {repr(subject)}\nmsg['From'] = {repr(from_addr)}\nmsg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['Subject']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['Subject'] = {repr(subject)}\nmsg['From'] = {repr(from_addr)}\nmsg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['From']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['From'] = {repr(from_addr)}\nmsg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['To']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['Cc']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['Cc'] = {repr(cc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "body = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)\nwith smtplib.SMTP('smtp.leidenuniv.nl') as server:",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "attachment_data",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "attachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)\nwith smtplib.SMTP('smtp.leidenuniv.nl') as server:\n    server.send_message(msg)\nprint(\"âœ… Remote email sent.\")",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "part = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)\nwith smtplib.SMTP('smtp.leidenuniv.nl') as server:\n    server.send_message(msg)\nprint(\"âœ… Remote email sent.\")\n\"\"\"",
        "detail": "code.utils",
        "documentation": {}
    }
]