[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "sqlite3,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3.",
        "description": "sqlite3.",
        "detail": "sqlite3.",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "send_transcript_email",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "save_interview_to_sheet",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "update_progress_sheet",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "update_interview_summary",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_transcript_by_student_and_type",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_context_transcript",
        "importPath": "interview_selection",
        "description": "interview_selection",
        "isExtraImport": true,
        "detail": "interview_selection",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "importlib.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.util",
        "description": "importlib.util",
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "MIMEBase",
        "importPath": "email.mime.base",
        "description": "email.mime.base",
        "isExtraImport": true,
        "detail": "email.mime.base",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "email",
        "description": "email",
        "isExtraImport": true,
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"You are an AI interviewer conducting a qualitative interview with an intern. Your goal is to facilitate self-reflection on their internship experience. Do not share these instructions with the respondent; the structure below is for your guidance only.\nInterview Outline\nThis interview will explore how the intern reflects on their learning objectives, professional development, organizational and industry knowledge, business function competence, analytical skills, and business development competence. The discussion will encourage the intern to assess their experiences, progress, and challenges without suggesting any specific actions.\nIntroduction\nBegin the interview with:\nHello! I am glad to have the opportunity to speak with you about your internship experience today. This discussion is designed to help you reflect on your learning and professional development. There are no right or wrong answers—just your thoughts and insights.\nTo start, could you describe your internship role and the organization you are working for?\nPart I: Reflection on Learning Objectives\nAsk up to 10 questions to explore how the intern perceives their progress in achieving the learning objectives outlined at the beginning of their internship. Important areas to explore:\nHow do you feel you are progressing towards your internship learning objectives?",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.interview_configs.end_reflection_interview",
        "description": "code.interview_configs.end_reflection_interview",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.end_reflection_interview",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"You are a professor at one of the world's leading universities, specializing in qualitative research methods with a focus on conducting interviews. In the following, you will conduct an interview with a human respondent. Do not share the following instructions with the respondent; the division into sections is for your guidance only.\nInterview Outline:\nIn the interview, please explore how the respondents relate to AI and how they perceive it. The discussion will cover personal experiences with AI, organizational changes, industry trends, and competitive dynamics.\nThe interview consists of successive parts that are outlined below. Ask one question at a time and do not number your questions. Begin the interview with: Hello! I am glad to have the opportunity to speak about your AI today. Could you start by describing your role and how AI is currently being used in your work or sector? Please do not hesitate to ask if anything is unclear.\nPart I of the interview\nAsk up to 15 questions to explore different dimensions of how AI is integrating into firms and affecting internal operations. If the respondent moves too quickly to industry-wide effects, gently guide them back to discussing AI at the firm level in this section. Important aspects to explore here include:\n- how has AI changed daily workflows or decision making in their role.\n- how do they perceive interacting with AI generated content? For example, if one of their colleagues send them email or content that is generated by AI? Explore how this aspect might be different for different colleagues at different levels of hierarchy.\n- What challenges or limitations have you observed in AI adoption within your firm?\n- do you trust AI generated content?",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\n\"\"\"\n# Further details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\n# Codes",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "CODES = \"\"\"Codes:\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have asked all questions from the Interview Outline, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text.\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n\"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n\"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n\"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n\"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nPOST_INTERVIEW_SURVEY_URL = \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_2ccylYhvDFXPVGK\"\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nPOST_INTERVIEW_SURVEY_URL = \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_2ccylYhvDFXPVGK\"\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "LOGINS = False\n# Directories\nPOST_INTERVIEW_SURVEY_URL = \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_2ccylYhvDFXPVGK\"\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "POST_INTERVIEW_SURVEY_URL",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "POST_INTERVIEW_SURVEY_URL = \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_2ccylYhvDFXPVGK\"\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.interview_configs.industry_org_survey",
        "description": "code.interview_configs.industry_org_survey",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.industry_org_survey",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"You are an AI interviewer conducting a qualitative interview with an intern. Your goal is to facilitate self-reflection on their internship experience. Do not share these instructions with the respondent; the structure below is for your guidance only.\nInterview Outline\nThis interview will explore how the intern reflects on their learning objectives, professional development, organizational and industry knowledge, business function competence, analytical skills, and business development competence. The discussion will encourage the intern to assess their experiences, progress, and challenges without suggesting any specific actions.\nIntroduction\nBegin the interview with:\nHello! I am glad to have the opportunity to speak with you about your internship experience today. This discussion is designed to help you reflect on your learning and professional development. There are no right or wrong answers—just your thoughts and insights.\nTo start, could you describe your internship role and the organization you are working for?\nPart I: Reflection on Learning Objectives\nAsk up to 10 questions to explore how the intern perceives their progress in achieving the learning objectives outlined at the beginning of their internship. Important areas to explore:\nHow do you feel you are progressing towards your internship learning objectives?",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.interview_configs.midterm_interview",
        "description": "code.interview_configs.midterm_interview",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.interview_configs.midterm_interview",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"\nYou are a world leading career couch, specializing in career growth through conducting interviews. In the following, you will conduct an interview with a human respondent (an employee) focused on their performance and personal growth. Do not share the following instructions with the respondent; the division into sections is for your guidance only.\nInterview Outline:\nIn this interview, please help the respondent reflect on their professional development across several performance dimensions. The discussion will cover:\n- How they have enhanced their organizational and industry knowledge.\n- Their progress in developing functional expertise and role-specific skills.\n- Their approach to problem-solving and analytical challenges.\n- The growth of their professional skills, including teamwork, leadership, and communication.\n- Their engagement in projects and contributions to outcomes (applicable only if you completed a Business Development Internship with a project development component; if your internship was a Business Practice Internship, please skip this section).\nThe interview is designed to foster self-reflection, identify areas for improvement, and recognize existing strengths. Please ask one question at a time and do not number your questions. Begin the interview with:",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"<Codes>",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CODES = \"\"\"<Codes>\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have gone through the Interview Outline and the interviewee has submitted thier final evluation, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text. </Codes>\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\n# API_PROVIDER = \"openai\"\n# MODEL = \"gpt-4o\" # gpt-4.5-preview # -mini\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "format_private_key",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def format_private_key(key_str):\n    \"\"\"\n    Normalize the private key string as done in the email sending code.\n    \"\"\"\n    if \"\\n\" in key_str:\n        key_str = key_str.replace(\"\\n\", \"\\n\")\n    if key_str.startswith(\"-----BEGIN OPENSSH PRIVATE KEY-----\") and \"-----END OPENSSH PRIVATE KEY-----\" in key_str:\n        header = \"-----BEGIN OPENSSH PRIVATE KEY-----\"\n        footer = \"-----END OPENSSH PRIVATE KEY-----\"\n        key_body = key_str[len(header):-len(footer)].strip()",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "get_ssh_connection",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def get_ssh_connection():\n    \"\"\"\n    Establish an SSH connection using the LIACS SSH credentials.\n    Returns the SSH client and the temporary key file path.\n    \"\"\"\n    ssh_host = \"ssh.liacs.nl\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets. Please set it in your secrets file.\")\n    key_str = st.secrets.get(\"LIACS_SSH_KEY\")",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "ensure_remote_directory",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def ensure_remote_directory(ssh, remote_directory):\n    \"\"\"\n    Ensures the remote directory exists by executing a mkdir command.\n    \"\"\"\n    mkdir_cmd = f\"mkdir -p {remote_directory}\"\n    stdin, stdout, stderr = ssh.exec_command(mkdir_cmd)\n    err = stderr.read().decode().strip()\n    if err:\n        raise PermissionError(f\"Failed to create remote directory {remote_directory}: {err}\")\ndef run_remote_sql(ssh, db_path, sql_query):",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "run_remote_sql",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def run_remote_sql(ssh, db_path, sql_query):\n    \"\"\"\n    Executes *sql_query* on the remote SQLite database at *db_path*.\n    Strategy:\n    1. First try the fast path using the `sqlite3` command‑line binary.\n    2. If that binary is unavailable (e.g. recently removed from the server),\n       transparently fall back to a Python one‑liner executed remotely. Most\n       servers have Python even when the CLI tool is absent.\n    3. In both cases any stderr output is considered an error and surfaced to\n       the caller so that higher‑level functions (e.g. `save_interview_to_sheet`)",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "save_interview_to_sheet",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def save_interview_to_sheet(interview_id, student_id, name, company, interview_type, timestamp, transcript, duration_minutes):\n    \"\"\"\n    Inserts the interview data into the remote SQLite database.\n    The database file (interviews.db) is located in the SSH directory.\n    \"\"\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets.\")\n    remote_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"\n    db_path = f\"{remote_directory}/interviews.db\"",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "update_progress_sheet",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def update_progress_sheet(student_id, name, interview_type, timestamp):\n    \"\"\"\n    Inserts a progress update into the remote SQLite database.\n    The database file (interviews.db) is located in the SSH directory.\n    \"\"\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets.\")\n    remote_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"\n    db_path = f\"{remote_directory}/interviews.db\"",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "get_transcript_by_student_and_type",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def get_transcript_by_student_and_type(student_id, interview_type, ssh_conn=None):\n    \"\"\"\n    Retrieves the most recent transcript for a given student and interview type from the remote SQLite database.\n    Accepts an optional ssh_conn parameter. If not provided, a new connection is established.\n    Returns the transcript text, or an empty string if not found.\n    \"\"\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets.\")\n    remote_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "update_interview_summary",
        "kind": 2,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "def update_interview_summary(interview_id, summary):\n    \"\"\"\n    Updates the interview record identified by interview_id with the given summary.\n    \"\"\"\n    ssh_username = st.secrets.get(\"LIACS_SSH_USERNAME\")\n    if not ssh_username:\n        raise ValueError(\"LIACS_SSH_USERNAME is not defined in secrets.\")\n    remote_directory = f\"/home/{ssh_username}/BS-Interviews/Database\"\n    db_path = f\"{remote_directory}/interviews.db\"\n    ssh, tmp_key_path = get_ssh_connection()",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "DB_PATH = r'''{db_path}'''\nSQL = textwrap.dedent(r'''{safe_query_py}''')\nconn = sqlite3.connect(DB_PATH)\nconn.executescript(SQL)\nconn.commit()\nconn.close()\n\"\"\"\n        # Heredoc prevents quoting issues.\n        python_cmd = f\"python3 - <<'PY'\\n{python_script}\\nPY\"\n        stdin2, stdout2, stderr2 = ssh.exec_command(python_cmd)",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "SQL",
        "kind": 5,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "SQL = textwrap.dedent(r'''{safe_query_py}''')\nconn = sqlite3.connect(DB_PATH)\nconn.executescript(SQL)\nconn.commit()\nconn.close()\n\"\"\"\n        # Heredoc prevents quoting issues.\n        python_cmd = f\"python3 - <<'PY'\\n{python_script}\\nPY\"\n        stdin2, stdout2, stderr2 = ssh.exec_command(python_cmd)\n        err2 = stderr2.read().decode().strip()",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "conn = sqlite3.connect(DB_PATH)\nconn.executescript(SQL)\nconn.commit()\nconn.close()\n\"\"\"\n        # Heredoc prevents quoting issues.\n        python_cmd = f\"python3 - <<'PY'\\n{python_script}\\nPY\"\n        stdin2, stdout2, stderr2 = ssh.exec_command(python_cmd)\n        err2 = stderr2.read().decode().strip()\n        if err2:",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "conn = sqlite3.connect(r'{db_path}')\ncur = conn.cursor()\ncur.execute(\\\"{query}\\\")\nrow = cur.fetchone()\nprint(json.dumps(row[0] if row else ''))\nconn.close()\n\"\"\"\n        python_cmd = f\"python3 - <<'PY'\\n{python_fetch}\\nPY\"\n        stdin, stdout, stderr = ssh.exec_command(python_cmd)\n        result = stdout.read().decode().strip().strip('\"')  # simple JSON string value",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "cur = conn.cursor()\ncur.execute(\\\"{query}\\\")\nrow = cur.fetchone()\nprint(json.dumps(row[0] if row else ''))\nconn.close()\n\"\"\"\n        python_cmd = f\"python3 - <<'PY'\\n{python_fetch}\\nPY\"\n        stdin, stdout, stderr = ssh.exec_command(python_cmd)\n        result = stdout.read().decode().strip().strip('\"')  # simple JSON string value\n        error = stderr.read().decode().strip()",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "row",
        "kind": 5,
        "importPath": "code.database",
        "description": "code.database",
        "peekOfCode": "row = cur.fetchone()\nprint(json.dumps(row[0] if row else ''))\nconn.close()\n\"\"\"\n        python_cmd = f\"python3 - <<'PY'\\n{python_fetch}\\nPY\"\n        stdin, stdout, stderr = ssh.exec_command(python_cmd)\n        result = stdout.read().decode().strip().strip('\"')  # simple JSON string value\n        error = stderr.read().decode().strip()\n        if error:\n            raise Exception(f\"SQLite error while fetching transcript: {error}\")",
        "detail": "code.database",
        "documentation": {}
    },
    {
        "label": "validate_query_params",
        "kind": 2,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "def validate_query_params(params):\n    missing = [k for k in required_params if k not in params or not params[k]]\n    return len(missing) == 0, missing\nis_valid, missing = validate_query_params(query_params)\nif not is_valid:\n    st.error(f\"Missing parameters: {', '.join(missing)}\")\n    st.stop()\n# Fetch parameters -----------------------------------------------------------\nstudent_number = _get_param(\"student_number\", \"\")\nrespondent_name = _get_param(\"name\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "provider",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "provider = st.secrets.get(\"API_PROVIDER\", \"openai\").lower()\nmodel = st.secrets.get(\"MODEL\", \"gpt-3.5-turbo\")\nfrom openai import OpenAI\nif provider == \"openai\":\n    api = \"openai\"\n    client = OpenAI(api_key=st.secrets[\"API_KEY\"])\nelif provider == \"deepinfra\":\n    api = \"openai\"\n    client = OpenAI(\n        api_key=st.secrets[\"DEEPINFRA_API_KEY\"],",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "model = st.secrets.get(\"MODEL\", \"gpt-3.5-turbo\")\nfrom openai import OpenAI\nif provider == \"openai\":\n    api = \"openai\"\n    client = OpenAI(api_key=st.secrets[\"API_KEY\"])\nelif provider == \"deepinfra\":\n    api = \"openai\"\n    client = OpenAI(\n        api_key=st.secrets[\"DEEPINFRA_API_KEY\"],\n        base_url=\"https://api.deepinfra.com/v1/openai\",",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "ENV",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "ENV = st.secrets.get(\"ENV\", \"production\")\nquery_params = st.query_params\nif \"interview_config\" not in query_params:\n    import config  # local default\n    config_name = \"Default\"\nelse:\n    config_name = st.query_params.get(\"interview_config\", [\"Default\"])\n    config_path = os.path.join(\n        os.path.dirname(__file__), \"interview_configs\", f\"{config_name}.py\"\n    )",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "query_params",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "query_params = st.query_params\nif \"interview_config\" not in query_params:\n    import config  # local default\n    config_name = \"Default\"\nelse:\n    config_name = st.query_params.get(\"interview_config\", [\"Default\"])\n    config_path = os.path.join(\n        os.path.dirname(__file__), \"interview_configs\", f\"{config_name}.py\"\n    )\n    if not os.path.exists(config_path):",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "required_params",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "required_params = [\"name\", \"company\", \"recipient_email\"]\ndef validate_query_params(params):\n    missing = [k for k in required_params if k not in params or not params[k]]\n    return len(missing) == 0, missing\nis_valid, missing = validate_query_params(query_params)\nif not is_valid:\n    st.error(f\"Missing parameters: {', '.join(missing)}\")\n    st.stop()\n# Fetch parameters -----------------------------------------------------------\nstudent_number = _get_param(\"student_number\", \"\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "student_number",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "student_number = _get_param(\"student_number\", \"\")\nrespondent_name = _get_param(\"name\")\nrecipient_email = _get_param(\"recipient_email\")\ncompany_name = _get_param(\"company\")\n# ----------------------------------------------------------------------------\n# Qualtrics post-interview survey link (CONFIG-DRIVEN)\n# ----------------------------------------------------------------------------\nDEFAULT_QUALTRICS_URL = (\n    \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"\n)",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "respondent_name",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "respondent_name = _get_param(\"name\")\nrecipient_email = _get_param(\"recipient_email\")\ncompany_name = _get_param(\"company\")\n# ----------------------------------------------------------------------------\n# Qualtrics post-interview survey link (CONFIG-DRIVEN)\n# ----------------------------------------------------------------------------\nDEFAULT_QUALTRICS_URL = (\n    \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"\n)\nevaluation_url = getattr(",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "recipient_email",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "recipient_email = _get_param(\"recipient_email\")\ncompany_name = _get_param(\"company\")\n# ----------------------------------------------------------------------------\n# Qualtrics post-interview survey link (CONFIG-DRIVEN)\n# ----------------------------------------------------------------------------\nDEFAULT_QUALTRICS_URL = (\n    \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"\n)\nevaluation_url = getattr(\n    config, \"POST_INTERVIEW_SURVEY_URL\", DEFAULT_QUALTRICS_URL",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "company_name",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "company_name = _get_param(\"company\")\n# ----------------------------------------------------------------------------\n# Qualtrics post-interview survey link (CONFIG-DRIVEN)\n# ----------------------------------------------------------------------------\nDEFAULT_QUALTRICS_URL = (\n    \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"\n)\nevaluation_url = getattr(\n    config, \"POST_INTERVIEW_SURVEY_URL\", DEFAULT_QUALTRICS_URL\n)",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "DEFAULT_QUALTRICS_URL",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "DEFAULT_QUALTRICS_URL = (\n    \"https://leidenuniv.eu.qualtrics.com/jfe/form/SV_bvafC8YWGQJC1Ey\"\n)\nevaluation_url = getattr(\n    config, \"POST_INTERVIEW_SURVEY_URL\", DEFAULT_QUALTRICS_URL\n)\nevaluation_url_with_session = (\n    f\"{evaluation_url}?session_id={st.session_state.session_id}\"\n)\n# ----------------------------------------------------------------------------",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "evaluation_url",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "evaluation_url = getattr(\n    config, \"POST_INTERVIEW_SURVEY_URL\", DEFAULT_QUALTRICS_URL\n)\nevaluation_url_with_session = (\n    f\"{evaluation_url}?session_id={st.session_state.session_id}\"\n)\n# ----------------------------------------------------------------------------\n# EARLY EXIT if the only thing left to show is the evaluation button\n# ----------------------------------------------------------------------------\nif st.session_state.show_evaluation_only:",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "evaluation_url_with_session",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "evaluation_url_with_session = (\n    f\"{evaluation_url}?session_id={st.session_state.session_id}\"\n)\n# ----------------------------------------------------------------------------\n# EARLY EXIT if the only thing left to show is the evaluation button\n# ----------------------------------------------------------------------------\nif st.session_state.show_evaluation_only:\n    st.markdown(\n        f\"\"\"\n        <div style=\"display: flex; justify-content: center; align-items: center; margin-top: 2em;\">",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "api_kwargs",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "api_kwargs = {\"stream\": True}\nif api == \"anthropic\":\n    api_kwargs[\"system\"] = st.secrets.get(\n        \"SYSTEM_PROMPT\", \"Your default system prompt\"\n    )\napi_kwargs.update(\n    {\n        \"messages\": st.session_state.messages,\n        \"model\": model,\n        \"max_tokens\": config.MAX_OUTPUT_TOKENS,",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "load_interview_context_map",
        "kind": 2,
        "importPath": "code.interview_selection",
        "description": "code.interview_selection",
        "peekOfCode": "def load_interview_context_map():\n    \"\"\"Reads the interview context mapping from CSV.\"\"\"\n    mapping = {}\n    if MATRIX_FILE.exists():\n        with open(MATRIX_FILE, newline=\"\", encoding=\"utf-8\") as csvfile:\n            reader = csv.DictReader(csvfile, delimiter=\";\")\n            for row in reader:\n                current = row[\"current_interview\"].strip().lower()\n                context = row[\"context_interview\"].strip().lower()\n                mapping[current] = context",
        "detail": "code.interview_selection",
        "documentation": {}
    },
    {
        "label": "get_context_transcript",
        "kind": 2,
        "importPath": "code.interview_selection",
        "description": "code.interview_selection",
        "peekOfCode": "def get_context_transcript(student_id: str, current_interview_type: str) -> str:\n    \"\"\"\n    Given the current interview type and student ID, this returns the summary transcript\n    of the associated context interview if defined in the matrix.\n    \"\"\"\n    context_map = load_interview_context_map()\n    interview_key = current_interview_type.lower()\n    if interview_key in context_map:\n        context_type = context_map[interview_key]\n        transcript = get_transcript_by_student_and_type(student_id, context_type)",
        "detail": "code.interview_selection",
        "documentation": {}
    },
    {
        "label": "MATRIX_FILE",
        "kind": 5,
        "importPath": "code.interview_selection",
        "description": "code.interview_selection",
        "peekOfCode": "MATRIX_FILE = Path(__file__).parent / \"interview_matrix.csv\"\n# Show file load message only once\nif \"interview_matrix_notice_shown\" not in st.session_state:\n    if MATRIX_FILE.exists():\n        # st.info(f\"✅ Found interview matrix file: {MATRIX_FILE}\")\n        pass\n    else:\n        st.warning(f\"⚠️ interview_matrix.csv not found at {MATRIX_FILE}\")\n    st.session_state.interview_matrix_notice_shown = True\ndef load_interview_context_map():",
        "detail": "code.interview_selection",
        "documentation": {}
    },
    {
        "label": "check_if_interview_completed",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def check_if_interview_completed(directory, username):\n    \"\"\"Check if interview transcript/time file exists which signals that interview was completed.\"\"\"\n    if username != \"testaccount\":\n        try:\n            with open(os.path.join(directory, f\"{username}.txt\"), \"r\") as _:\n                return True\n        except FileNotFoundError:\n            return False\n    else:\n        return False",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def save_interview_data(student_number, company_name, transcripts_directory=None, times_directory=None):\n    # Use default directories from config if not provided\n    if transcripts_directory is None or times_directory is None:\n        import config\n        if transcripts_directory is None:\n            transcripts_directory = config.TRANSCRIPTS_DIRECTORY\n        if times_directory is None:\n            times_directory = config.TIMES_DIRECTORY\n    current_date = time.strftime(\"%y%m%d\")\n    sanitized_company = \"\".join(c for c in company_name if c.isalnum())",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "send_transcript_email",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def send_transcript_email(\n    student_number,\n    recipient_email,\n    transcript_link,\n    transcript_file,\n    name_from_form=None  # NEW parameter to pass the interviewee's name\n):\n    \"\"\"\n    Sends the interview transcript via either Gmail or LIACS SMTP depending on config.\n    \"\"\"",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg = MIMEMultipart()\nmsg['Subject'] = {repr(subject)}\nmsg['From'] = {repr(from_addr)}\nmsg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nmsg['Bcc'] = {repr(bcc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['Subject']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['Subject'] = {repr(subject)}\nmsg['From'] = {repr(from_addr)}\nmsg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nmsg['Bcc'] = {repr(bcc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['From']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['From'] = {repr(from_addr)}\nmsg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nmsg['Bcc'] = {repr(bcc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['To']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['To'] = {repr(to_addr)}\nmsg['Cc'] = {repr(cc_addr)}\nmsg['Bcc'] = {repr(bcc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['Cc']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['Cc'] = {repr(cc_addr)}\nmsg['Bcc'] = {repr(bcc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "msg['Bcc']",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "msg['Bcc'] = {repr(bcc_addr)}\nbody = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "body = {repr(body)}\nmsg.attach(MIMEText(body, 'plain'))\nattachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)\nwith smtplib.SMTP('smtp.leidenuniv.nl') as server:",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "attachment_data",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "attachment_data = base64.b64decode({repr(attachment_data)})\npart = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)\nwith smtplib.SMTP('smtp.leidenuniv.nl') as server:\n    server.send_message(msg)\nprint(\"✅ Email sent. Please wait with closing this window as we are still processing data.\")",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "part = MIMEBase(\"text\", \"plain\")\npart.set_payload(attachment_data)\nencoders.encode_base64(part)\npart.add_header(\"Content-Type\", f'text/plain; name=\"{file_name}\"')\npart.add_header(\"Content-Disposition\", f'attachment; filename=\"{file_name}\"')\nmsg.attach(part)\nwith smtplib.SMTP('smtp.leidenuniv.nl') as server:\n    server.send_message(msg)\nprint(\"✅ Email sent. Please wait with closing this window as we are still processing data.\")\n\"\"\"",
        "detail": "code.utils",
        "documentation": {}
    }
]